"""
Django settings for eventgoapp project.

Generated by 'django-admin startproject' using Django 5.1.7.

This configuration loads sensitive values from environment variables.
Create an .env file at the project root (eventgoapp/.env). See .env.example.
"""
import os
from pathlib import Path

from dotenv import load_dotenv

import oauth2_provider.contrib.rest_framework  # noqa: F401
import cloudinary
import cloudinary.uploader  # noqa: F401
import cloudinary.api  # noqa: F401
from oauth2_provider.contrib import rest_framework  # noqa: F401

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment vars from eventgoapp/.env
load_dotenv(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "dev-secret-key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "True").lower() in {"1", "true", "yes", "on"}

ALLOWED_HOSTS = [h.strip() for h in os.getenv("DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost").split(",") if h.strip()]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',    
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'events.apps.EventsConfig',
    'ckeditor',
    'ckeditor_uploader',
    'rest_framework',
    'oauth2_provider',
    'corsheaders',
    'django.contrib.sites',  # Bắt buộc cho allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'django_celery_beat',
    'push_notifications', # 4/5
    'cloudinary',
    'cloudinary_storage',
    'drf_yasg',
    'debug_toolbar',
    'channels',  # For real-time chat
]





cloudinary.config(
    cloud_name=os.getenv("CLOUDINARY_CLOUD_NAME", ""),
    api_key=os.getenv("CLOUDINARY_API_KEY", ""),
    api_secret=os.getenv("CLOUDINARY_API_SECRET", ""),
)

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'events', 'static'),
]

STATIC_ROOT = BASE_DIR / "staticfiles"


LOGIN_REDIRECT_URL = '/'


LOGOUT_REDIRECT_URL = '/'

#30/3
SITE_ID = 1

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

GOOGLE_CALENDAR_API = {
    'CLIENT_ID': os.getenv('GOOGLE_CALENDAR_CLIENT_ID', ''),
    'CLIENT_SECRET': os.getenv('GOOGLE_CALENDAR_CLIENT_SECRET', ''),
    'REDIRECT_URI': os.getenv('GOOGLE_CALENDAR_REDIRECT_URI', 'http://localhost:8000/auth/google/callback/'),
    'SCOPES': ['https://www.googleapis.com/auth/calendar.events'],
}


ACCOUNT_AUTHENTICATION_METHOD = 'username_email'  # Cho phép đăng nhập bằng username hoặc email
ACCOUNT_EMAIL_VERIFICATION = "optional"


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))  # Typically 587 for TLS
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() in {"1", "true", "yes", "on"}
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': ['oauth2_provider.contrib.rest_framework.OAuth2Authentication']
}

CKEDITOR_UPLOAD_PATH = 'ckeditor/images/'


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', #đặt ở đầu để kiểm tra domain trước
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

CORS_ALLOWED_ALL_ORIGINS = True #CORS cho phép hết (ALL)

AUTH_USER_MODEL = 'events.User'

ROOT_URLCONF = 'eventgoapp.urls'

MEDIA_ROOT = f'{BASE_DIR}/events/static/'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'eventgoapp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.mysql'),
        'NAME': os.getenv('DB_NAME', 'eventdb'),
        'USER': os.getenv('DB_USER', 'root'),
        'PASSWORD': os.getenv('DB_PASSWORD', ''),
        'HOST': os.getenv('DB_HOST', ''),
        'PORT': os.getenv('DB_PORT', '3306'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

INTERNAL_IPS = [
    '127.0.0.1'
]

#29/3

CLIENT_ID = os.getenv('OAUTH_CLIENT_ID', '')
CLIENT_SECRET = os.getenv('OAUTH_CLIENT_SECRET', '')

GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID', '')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET', '')

FACEBOOK_ID = os.getenv('FACEBOOK_ID', '')
FACKEBOOK_SECRET = os.getenv('FACEBOOK_SECRET', '')

REDIS_HOST = os.getenv('REDIS_HOST', '127.0.0.1')
REDIS_PORT = os.getenv('REDIS_PORT', '6379')
REDIS_PASSWORD = os.getenv('REDIS_PASSWORD', '')

CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', f'redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/0' if REDIS_PASSWORD else f'redis://{REDIS_HOST}:{REDIS_PORT}/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', CELERY_BROKER_URL)

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.getenv('REDIS_CACHE_URL', f'redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/1' if REDIS_PASSWORD else f'redis://{REDIS_HOST}:{REDIS_PORT}/1'),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            **({"PASSWORD": REDIS_PASSWORD} if REDIS_PASSWORD else {}),
        }
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# Payment providers (MoMo / VNPAY)
MOMO_PARTNER_CODE = os.getenv('MOMO_PARTNER_CODE', 'MOMO')
MOMO_ACCESS_KEY = os.getenv('MOMO_ACCESS_KEY', '')
MOMO_SECRET_KEY = os.getenv('MOMO_SECRET_KEY', '')
MOMO_CREATE_ENDPOINT = os.getenv('MOMO_CREATE_ENDPOINT', 'https://test-payment.momo.vn/v2/gateway/api/create')
MOMO_QUERY_ENDPOINT = os.getenv('MOMO_QUERY_ENDPOINT', 'https://test-payment.momo.vn/v2/gateway/api/query')
MOMO_REDIRECT_URL = os.getenv('MOMO_REDIRECT_URL', 'http://localhost:8000/payment/momo-payment-success/')
MOMO_IPN_URL = os.getenv('MOMO_IPN_URL', 'http://localhost:8000/payment/momo-payment-notify/')

VNPAY_TMN_CODE = os.getenv('VNPAY_TMN_CODE', '')
VNPAY_HASH_SECRET = os.getenv('VNPAY_HASH_SECRET', '')
VNPAY_QUERY_ENDPOINT = os.getenv('VNPAY_QUERY_ENDPOINT', 'https://sandbox.vnpayment.vn/merchant_webapi/api/transaction')
